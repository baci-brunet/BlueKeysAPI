service: bluekeys
frameworkVersion: "3"

provider:
  name: aws
  runtime: python3.12
  region: us-east-1
  stage: ${opt:stage, 'dev'}
  architecture: x86_64

  environment:
    STAGE: ${self:provider.stage}
    JWT_AUDIENCE: ${env:JWT_AUDIENCE}
    CLERK_ISSUER_URL: ${env:CLERK_ISSUER_URL}
    DB_HOST: ${env:DB_HOST}
    DB_PORT: ${env:DB_PORT, '3306'}
    DB_USER: ${env:DB_USER}
    DB_PASSWORD: ${env:DB_PASSWORD}
    DB_NAME: ${env:DB_NAME}

  iam:
    role:
      statements:
        # CloudWatch Logs (equivalent to AWSLambdaBasicExecutionRole)
        - Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
          Resource: "*"
        # ENI permissions to attach Lambdas to your VPC
        - Effect: Allow
          Action:
            - ec2:CreateNetworkInterface
            - ec2:DescribeNetworkInterfaces
            - ec2:DeleteNetworkInterface
            - ec2:DescribeSubnets
            - ec2:DescribeSecurityGroups
            - ec2:DescribeVpcs
          Resource: "*"

  httpApi:
    useProviderStage: true
    cors:
      allowedOrigins: ["*"]
      allowedHeaders: [Authorization, Content-Type]
      allowedMethods: [GET, POST, OPTIONS]
      allowCredentials: false

    authorizers:
      clerkJwt:
        type: jwt
        identitySource: "$request.header.Authorization"
        issuerUrl: ${env:CLERK_ISSUER_URL}           
        audience:
          - ${env:JWT_AUDIENCE}   


functions:
  health:
    handler: src/handlers/health.get
    events:
      - httpApi:
          path: /health
          method: GET

  postUserInfo:
    handler: src/handlers/profile.post 
    vpc:
      securityGroupIds:
        - ${env:LAMBDA_SECURITY_GROUP_ID}        
      subnetIds:
        - ${env:LAMBDA_SUBNET_ID_1}
        - ${env:LAMBDA_SUBNET_ID_2}
    timeout: 29
    events:
      - httpApi:
          path: /userInfo
          method: POST
          authorizer:
            name: clerkJwt

  reportsGet:
    handler: src/handlers/reports.get
    vpc:
      securityGroupIds:
        - ${env:LAMBDA_SECURITY_GROUP_ID}      
      subnetIds:
        - ${env:LAMBDA_SUBNET_ID_1}
        - ${env:LAMBDA_SUBNET_ID_2}
    timeout: 29
    events:
      - httpApi:
          path: /reports
          method: GET
          authorizer:
            name: clerkJwt
  
  restaurants:
    handler: src/handlers/restaurants.get
    vpc:
      securityGroupIds:
        - ${env:LAMBDA_SG_ID}
      subnetIds:
        - ${env:LAMBDA_SUBNET_ID_1}
        - ${env:LAMBDA_SUBNET_ID_2}
    events:
      - httpApi:
          path: /restaurants
          method: GET
          authorizer:
            name: clerkJwt

  restaurantsCreate:
    handler: src/handlers/restaurants.post
    vpc:
      securityGroupIds:
        - ${env:LAMBDA_SG_ID}
      subnetIds:
        - ${env:LAMBDA_SUBNET_ID_1}
        - ${env:LAMBDA_SUBNET_ID_2}
    events:
      - httpApi:
          path: /restaurants
          method: POST
          authorizer:
            name: clerkJwt
    
package:
  patterns: ["!**/*","src/**","requirements.txt"]

plugins:
  - serverless-python-requirements

custom:
  pythonRequirements:
    dockerizePip: true
    slim: true
    strip: false
    useStaticCache: true
    useDownloadCache: true