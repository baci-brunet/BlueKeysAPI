service: bluekeys
frameworkVersion: "3"

provider:
  name: aws
  runtime: python3.12
  region: us-east-1
  stage: ${opt:stage, 'dev'}
  architecture: x86_64

  environment:
    STAGE: ${self:provider.stage}
    JWT_AUDIENCE: ${env:JWT_AUDIENCE}
    CLERK_ISSUER_URL: ${env:CLERK_ISSUER_URL}
    DB_HOST: ${env:DB_HOST}
    DB_PORT: ${env:DB_PORT, '3306'}
    DB_USER: ${env:DB_USER}
    DB_PASSWORD: ${env:DB_PASSWORD}
    DB_NAME: ${env:DB_NAME}

  iam:
    role:
      managedPolicies:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  httpApi:
    useProviderStage: true
    cors:
      allowedOrigins: ["*"]
      allowedHeaders: [Authorization, Content-Type]
      allowedMethods: [GET, POST, OPTIONS]
      allowCredentials: false

    authorizers:
      clerkJwt:
        type: jwt
        identitySource: "$request.header.Authorization"
        issuerUrl: ${env:CLERK_ISSUER_URL}           # must match token 'iss' exactly (Clerk usually has trailing '/')
        audience:
          - ${env:JWT_AUDIENCE}       # list + safe default


functions:
  health:
    handler: src/handlers/health.get
    events:
      - httpApi:
          path: /health
          method: GET

  postUserInfo:
    handler: src/handlers/profile.post
    timeout: 29
    events:
      - httpApi:
          path: /userInfo
          method: POST
          authorizer:
            name: clerkJwt

  reportsGet:
    handler: src/handlers/reports.get
    timeout: 29
    events:
      - httpApi:
          path: /reports
          method: GET
          authorizer:
            name: clerkJwt

package:
  patterns:
    - "!**/*"
    - "src/**"
    - "requirements.txt"

plugins:
  - serverless-python-requirements

custom:
  pythonRequirements:
    dockerizePip: true
    slim: true
    strip: false
    useStaticCache: true
    useDownloadCache: true